                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faarch64-jump-table-hardening
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
  -faltivec-src-compat=<value>
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fassume-nothrow-exception-dtor
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fatomic-fine-grained-memory
  -fatomic-ignore-denormal-mode
  -fatomic-remote-memory  May have atomic operations on remote memory
  -fauto-import           MinGW specific. Enable code generation support for automatic dllimport, and enable support for it in the linker. Enabled by default.
  -fbasic-block-address-map
  -fbasic-block-sections=<value>
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbuild-session-file=<file>
  -fbuild-session-timestamp=<time since Epoch in seconds>
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fc++-static-destructors=<value>
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcaret-diagnostics-max-lines=<value>
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fcheck-new             Do not assume C++ operator new may not return NULL
  -fclang-abi-compat=<version>
  -fclangir               Use the ClangIR pipeline to compile
  -fcodegen-data-generate=<path>
  -fcodegen-data-generate Emit codegen data into the object file. LLD for MachO (currently) merges them into default.cgdata.
  -fcodegen-data-use=<path>
  -fcodegen-data-use      Use codegen data read from default.cgdata to optimize the binary
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
  -fconstexpr-backtrace-limit=<value>
  -fconstexpr-depth=<value>
  -fconstexpr-steps=<value>
  -fconvergent-functions  Assume all functions may be convergent.
  -fcoro-aligned-allocation
  -fcoroutines            Enable support for the C++ Coroutines
  -fcoverage-compilation-dir=<value>
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-mcdc         Enable MC/DC criteria when generating code coverage
  -fcoverage-prefix-map=<old>=<new>
  -fcrash-diagnostics-dir=<dir>
  -fcrash-diagnostics=<value>
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcx-fortran-rules      Range reduction is enabled for complex arithmetic operations.
  -fcx-limited-range      Basic algebraic expansions of complex arithmetic operations involving are enabled.
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
  -fdebug-default-version=<value>
  -fdebug-info-for-profiling
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<old>=<new>
  -fdebug-ranges-base-address
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdefine-target-os-macros
  -fdelayed-template-parsing
  -fdelete-null-pointer-checks
  -fdiagnostics-absolute-paths
  -fdiagnostics-color=<value>
  -fdiagnostics-hotness-threshold=<value>
  -fdiagnostics-misexpect-tolerance=<value>
  -fdiagnostics-parseable-fixits
  -fdiagnostics-print-source-range-info
  -fdiagnostics-show-hotness
  -fdiagnostics-show-note-include-stack
  -fdiagnostics-show-option
  -fdiagnostics-show-template-tree
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
  -fdisable-block-signature-string
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
  -femit-all-decls        Emit all declarations, even if unused
  -femit-compact-unwind-non-canonical
  -femit-dwarf-unwind=<value>
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexcess-precision=<value>
  -fexperimental-late-parse-attributes
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
  -fexperimental-openacc-macro-override <value>
  -fexperimental-relative-c++-abi-vtables
  -fexperimental-sanitize-metadata-ignorelist=<value>
  -fexperimental-sanitize-metadata=<value>
  -fexperimental-strict-floating-point
  -fextend-arguments=<value>
  -fextend-variable-liveness=<value>
  -fextend-variable-liveness
                          Alias for -fextend-variable-liveness=all.
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffat-lto-objects       Enable fat LTO object support
  -ffile-compilation-dir=<value>
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, coverage mapping, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
  -ffinite-loops          Assume all non-trivial loops are finite.
  -ffinite-math-only      Allow floating-point optimizations that assume arguments and results are not NaNs or +-inf. This defines the \_\_FINITE\_MATH\_ONLY\_\_ preprocessor macro.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-g1              Reserve the G1 register (SPARC only)
  -ffixed-g2              Reserve the G2 register (SPARC only)
  -ffixed-g3              Reserve the G3 register (SPARC only)
  -ffixed-g4              Reserve the G4 register (SPARC only)
  -ffixed-g5              Reserve the G5 register (SPARC only)
  -ffixed-g6              Reserve the G6 register (SPARC only)
  -ffixed-g7              Reserve the G7 register (SPARC only)
  -ffixed-i0              Reserve the I0 register (SPARC only)
  -ffixed-i1              Reserve the I1 register (SPARC only)
  -ffixed-i2              Reserve the I2 register (SPARC only)
  -ffixed-i3              Reserve the I3 register (SPARC only)
  -ffixed-i4              Reserve the I4 register (SPARC only)
  -ffixed-i5              Reserve the I5 register (SPARC only)
  -ffixed-l0              Reserve the L0 register (SPARC only)
  -ffixed-l1              Reserve the L1 register (SPARC only)
  -ffixed-l2              Reserve the L2 register (SPARC only)
  -ffixed-l3              Reserve the L3 register (SPARC only)
  -ffixed-l4              Reserve the L4 register (SPARC only)
  -ffixed-l5              Reserve the L5 register (SPARC only)
  -ffixed-l6              Reserve the L6 register (SPARC only)
  -ffixed-l7              Reserve the L7 register (SPARC only)
  -ffixed-o0              Reserve the O0 register (SPARC only)
  -ffixed-o1              Reserve the O1 register (SPARC only)
  -ffixed-o2              Reserve the O2 register (SPARC only)
  -ffixed-o3              Reserve the O3 register (SPARC only)
  -ffixed-o4              Reserve the O4 register (SPARC only)
  -ffixed-o5              Reserve the O5 register (SPARC only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-check-cxx20-modules-input-files
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs)
  -ffp-eval-method=<value>
  -ffp-exception-behavior=<value>
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
  -ffunction-sections     Place each function in its own section
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-approx-transcendentals
  -fgpu-default-stream=<value>
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for supported offloading devices
  -fheinous-gnu-extensions
  -fhip-emit-relocatable  Compile HIP source to relocatable
  -fhip-fp32-correctly-rounded-divide-sqrt
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fhlsl-strict-availability
  -fhonor-infinities      Specify that floating-point optimizations are not allowed that assume arguments and results are not +-inf.
  -fhonor-nans            Specify that floating-point optimizations are not allowed that assume arguments and results are not NANs.
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fincremental-extensions
  -finit-global-zero      Zero initialize globals without default initialization (default)
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-persistent-storage-variables
  -fkeep-static-consts    Keep static const variables even if unused
  -fkeep-system-includes  Instead of expanding system headers when emitting preprocessor output, preserve the #include directive. Useful when producing preprocessed output for test case reduction. May produce incorrect output if preprocessor symbols that control the included content (e.g. _XOPEN_SOURCE) are defined in the including source file. The portability of the resulting source to other compilation environments is not guaranteed.
  -flax-vector-conversions=<value>
  -floop-interchange      Enable the loop interchange pass
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto-partitions=<value>
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-backtrace-limit=<value>
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
  -fmemory-profile-use=<pathname>
  -fmemory-profile=<directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
  -fminimize-whitespace   Ignore the whitespace from the input file when emitting preprocessor output. It will only contain whitespace when necessary, e.g. to keep two minus signs from merging into to an increment operator. Useful with the -P option to normalize whitespace such that two files with only formatting changes are equal.
  -fmodule-file=[<name>=]<file>
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header
  -fmodule-map-file=<file>
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-output=<value> Save intermediate module file results when compiling a standard C++ module unit.
  -fmodule-output         Save intermediate module file results when compiling a standard C++ module unit.
  -fmodulemap-allow-subdirectory-search
  -fmodules-cache-path=<directory>
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
  -fmodules-embed-all-files<value>
  -fmodules-ignore-macro=<value>
  -fmodules-prune-after=<seconds>
  -fmodules-prune-interval=<seconds>
  -fmodules-reduced-bmi   Generate the reduced BMI
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-user-build-path <directory>
  -fmodules-validate-input-files-content
  -fmodules-validate-once-per-build-session
  -fmodules-validate-system-headers
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-define-stdc        Define '__STDC__' to '1' in MSVC Compatibility mode
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
  -fms-volatile           Volatile loads and stores have acquire and release semantics
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
  -fno-assume-unique-vtables
  -fno-assumptions        Disable codegen and compile-time checks for C++23's [[assume]] attribute
  -fno-atomic-fine-grained-memory
  -fno-atomic-ignore-denormal-mode
  -fno-atomic-remote-memory
  -fno-auto-import        MinGW specific. Disable support for automatic dllimport in code generation and linking
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-clangir            Use the AST -> LLVM pipeline to compile
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-coverage-mcdc      Disable MC/DC coverage criteria
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cx-fortran-rules   Range reduction is disabled for complex arithmetic operations
  -fno-cx-limited-range   Basic algebraic expansions of complex arithmetic operations involving are disabled.
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-define-target-os-macros
  -fno-delayed-template-parsing
  -fno-delete-null-pointer-checks
  -fno-diagnostics-fixit-info
  -fno-diagnostics-show-line-numbers
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
  -fno-disable-block-signature-string
  -fno-discard-value-names
  -fno-dollars-in-identifiers
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-late-parse-attributes
  -fno-experimental-relative-c++-abi-vtables
  -fno-experimental-sanitize-metadata=<value>
  -fno-fat-lto-objects    Disable fat LTO object support
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
  -fno-gpu-approx-transcendentals
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-emit-relocatable
  -fno-hip-fp32-correctly-rounded-divide-sqrt
  -fno-hip-kernel-arg-name
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-init-global-zero   Do not zero initialize globals without default initialization
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-persistent-storage-variables
  -fno-keep-static-consts Don't keep static const variables even if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-loop-interchange   Disable the loop interchange pass
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
  -fno-modules-check-relocated<value>
  -fno-modules-validate-textual-header-includes
                          Do not enforce -fmodules-decluse and private header restrictions for textual headers. This flag will be removed in a future Clang release.
  -fno-ms-tls-guards      Do not emit code to perform on-demand initialization of thread-local variables
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-avoid-heapify-local-blocks
  -fno-objc-infer-related-result-type
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-offload-uniform-block
  -fno-offload-via-llvm   Don't use LLVM/Offload as portable offloading runtime.
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
  -fno-raw-string-literals
  -fno-register-global-dtors-with-atexit
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags. When --hip-link is specified, do not add -rpath with HIP runtime library directory to the linker flags
  -fno-rtlib-defaultlib   On Windows, do not emit /defaultlib: directives to link compiler-rt libraries
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
  -fno-sanitize-address-outline-instrumentation
  -fno-sanitize-address-poison-custom-array-cookie
  -fno-sanitize-address-use-after-scope
  -fno-sanitize-address-use-odr-indicator
  -fno-sanitize-annotate-debug-info=<value>
  -fno-sanitize-annotate-debug-info
  -fno-sanitize-cfi-canonical-jump-tables
  -fno-sanitize-cfi-cross-dso
  -fno-sanitize-coverage=<value>
  -fno-sanitize-hwaddress-experimental-aliasing
  -fno-sanitize-ignorelist
  -fno-sanitize-memory-param-retval
  -fno-sanitize-memory-track-origins
  -fno-sanitize-memory-use-after-dtor
  -fno-sanitize-merge=<value>
  -fno-sanitize-merge     Do not allow compiler to merge handlers for any sanitizers
  -fno-sanitize-recover=<value>
  -fno-sanitize-stable-abi
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
  -fno-sanitize-thread-func-entry-exit
  -fno-sanitize-thread-memory-access
  -fno-sanitize-trap=<value>
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-skip-odr-check-in-gmf
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-clash-protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-aliasing    Disable optimizations based on strict aliasing rules
  -fno-strict-float-cast-overflow
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disable SYCL C++ extensions
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trigraphs          Do not process trigraph sequences
  -fno-unified-lto        Use distinct LTO pipelines
  -fno-unique-section-names
  -fno-unique-source-file-names
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-verify-intermediate-code
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
  -fno-zos-extensions     Do not accept non-standard constructs supported by the z/OS compiler
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-avoid-heapify-local-blocks
  -fobjc-disable-direct-methods-for-testing
  -fobjc-encode-cxx-class-template-spec
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-implicit-host-device-templates
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -foffload-uniform-block Assume that kernels are launched with uniform block sizes (default true for CUDA/HIP and false otherwise)
  -foffload-via-llvm      Use LLVM/Offload as portable offloading runtime.
  -fomit-frame-pointer    Omit the frame pointer from functions that don't need it. Some stack unwinding cases, such as profilers and sanitizers, may prefer specifying -fno-omit-frame-pointer. On many targets, -O1 and higher omit the frame pointer by default. -m[no-]omit-leaf-frame-pointer takes precedence for leaf functions
  -fopenacc               Enable OpenACC
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-force-usm      Force behavior as if the user specified pragma omp requires unified_shared_memory.
  -fopenmp-offload-mandatory
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-target-jit     Emit code that can be JIT compiled for OpenMP offloading. Implies -foffload-lto=full
  -fopenmp-targets=<value>
  -fopenmp-version=<value>
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foperator-arrow-depth=<value>
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M,Section>
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
  -fpch-validate-input-files-content
  -fplugin-arg-<name>-<arg>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
  -fprebuilt-module-path=<directory>
  -fproc-stat-report=<value>
  -fproc-stat-report<value>
  -fprofile-arcs          Instrument code to produce gcov data files (*.gcda)
  -fprofile-continuous    Enable continuous instrumentation profiling mode
  -fprofile-exclude-files=<value>
  -fprofile-filter-files=<value>
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate-cold-function-coverage=<directory>
  -fprofile-generate-cold-function-coverage
  -fprofile-generate=<directory>
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
  -fprofile-instr-generate
  -fprofile-instr-use=<value>
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument. The file uses the sanitizer special case list format.
  -fprofile-remapping-file=<file>
  -fprofile-sample-accurate
  -fprofile-sample-use=<value>
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
  -fprofile-use=<pathname>
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-elf-got       Enable authentication of pointers from GOT (ELF only)
  -fptrauth-function-pointer-type-discrimination
  -fptrauth-indirect-gotos
  -fptrauth-init-fini-address-discrimination
  -fptrauth-init-fini     Enable signing of function pointers in init/fini arrays
  -fptrauth-intrinsics    Enable pointer authentication intrinsics
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-type-info-vtable-pointer-discrimination
  -fptrauth-vtable-pointer-address-discrimination
  -fptrauth-vtable-pointer-type-discrimination
  -frandomize-layout-seed-file=<file>
  -frandomize-layout-seed=<seed>
  -fraw-string-literals   Enable raw string literals
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags. When --hip-link is specified, also add -rpath with HIP runtime library directory to the linker flags
  -frtlib-defaultlib      On Windows, emit /defaultlib: directives to link compiler-rt libraries (default)
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
  -fsample-profile-use-profi
  -fsanitize-address-destructor=<value>
  -fsanitize-address-field-padding=<value>
  -fsanitize-address-globals-dead-stripping
  -fsanitize-address-outline-instrumentation
  -fsanitize-address-poison-custom-array-cookie
  -fsanitize-address-use-after-return=<mode>
  -fsanitize-address-use-after-scope
  -fsanitize-address-use-odr-indicator
  -fsanitize-annotate-debug-info=<value>
  -fsanitize-annotate-debug-info
  -fsanitize-cfi-canonical-jump-tables
  -fsanitize-cfi-cross-dso
  -fsanitize-cfi-icall-experimental-normalize-integers
  -fsanitize-cfi-icall-generalize-pointers
  -fsanitize-coverage-allowlist=<value>
  -fsanitize-coverage-ignorelist=<value>
  -fsanitize-coverage-stack-depth-callback-min=<M>
  -fsanitize-coverage=<value>
  -fsanitize-hwaddress-abi=<value>
  -fsanitize-hwaddress-experimental-aliasing
  -fsanitize-ignorelist=<value>
  -fsanitize-kcfi-arity   Embed function arity information into the KCFI patchable function prefix
  -fsanitize-memory-param-retval
  -fsanitize-memory-track-origins=<value>
  -fsanitize-memory-track-origins
  -fsanitize-memory-use-after-dtor
  -fsanitize-memtag-mode=<value>
  -fsanitize-merge=<value>
  -fsanitize-merge        Allow compiler to merge handlers for all sanitizers
  -fsanitize-recover=<value>
  -fsanitize-skip-hot-cutoff=<value>
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-ignorelist=<value>
  -fsanitize-thread-atomics
  -fsanitize-thread-func-entry-exit
  -fsanitize-thread-memory-access
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-ignore-overflow-pattern=<value>
  -fsanitize-undefined-strip-path-components=<number>
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
  -fsave-optimization-record
  -fseh-exceptions        Use SEH style exceptions
  -fseparate-named-sections
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fskip-odr-check-in-gmf Skip ODR checks for decls in the global module fragment.
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fspell-checking-limit=<value>
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
  -fsplit-stack           Use segmented stack
  -fstack-clash-protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-aliasing       Enable optimizations based on strict aliasing rules
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
  -fstrict-float-cast-overflow
  -fstrict-vtable-pointers
  -fswift-async-fp=<option>
  -fsycl-device-only      Compile SYCL code for device only
  -fsycl-host-only        Compile SYCL code for host only. Has no effect on non-SYCL compilations
  -fsycl                  Enable SYCL C++ extensions
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftemplate-backtrace-limit=<value>
  -ftemplate-depth=<value>
  -ftemporal-profile      Generate instrumented code to collect temporal information
  -ftest-coverage         Produce gcov notes files (*.gcno)
  -fthin-link-bitcode=<value>
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
  -ftime-trace-verbose<value>
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-max-size=<value>
  -ftrivial-auto-var-init-stop-after=<value>
  -ftrivial-auto-var-init=<value>
  -funified-lto           Use the unified LTO pipeline
  -funique-basic-block-section-names
  -funique-internal-linkage-names
  -funique-source-file-names
  -funroll-loops          Turn on loop unroller
  -funsafe-math-optimizations
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
  -fveclib=<value>        Use the given vector functions library. Note: -fveclib={ArmPL,SLEEF} implies -fno-math-errno
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fverify-intermediate-code
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL storage class. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
  -fvisibility-global-new-delete-hidden
  -fvisibility-global-new-delete=<value>
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL storage class. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv-pointer         Treat pointer overflow as two's complement
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
  -fxray-always-emit-typedevents
  -fxray-always-instrument=<value>
  -fxray-attr-list=<value>
  -fxray-function-groups=<value>
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
  -fxray-instrumentation-bundle=<value>
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Link XRay runtime library when -fxray-instrument is specified (default)
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fxray-shared           Enable shared library instrumentation with XRay
  -fzero-call-used-regs=<value>
  -fzos-extensions        Accept some non-standard constructs supported by the z/OS compiler
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  -mapx-features=<value>  Enable features of APX
                          Select label scheme for branch control-flow architecture protection
  -mdaz-ftz               Globally set the denormals-are-zero (DAZ) and flush-to-zero (FTZ) bits in the floating-point control register on program startup
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mlr-for-calls-only     Do not allocate the LR register for general purpose usage, only for calls. (AArch64 only)
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mno-apx-features=<value>
  -mno-daz-ftz            Do not globally set the denormals-are-zero (DAZ) and flush-to-zero (FTZ) bits in the floating-point control register on program startup
  -mno-fix-cmse-cve-2021-35465
  -mno-fix-cortex-a53-835769
  -mno-fix-cortex-a57-aes-1742098
  -mno-fix-cortex-a72-aes-1655431
  -mno-fmv                Disable function multiversioning
  -mno-frecipe            Disable frecipe.{s/d} and frsqrte.{s/d}
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-implicit-float     Don't generate implicit floating point or vector instructions
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
  -msoft-float            Use software floating point
  -object-file-name=<file>
  -Ofast<value>           Deprecated; use '-O3 -ffast-math' for the same behavior, or '-O3' to enable only conforming optimizations
  -print-file-name=<file> Print the full library path of <file>
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-multi-flags-experimental
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -fspv-extension=<value> Specify the available SPIR-V extensions. If this option is not specified, then all extensions are available.
  -fspv-target-env=<value>
